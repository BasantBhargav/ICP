class Solution {
    public boolean exist(char[][] board, String word) {
        int rows = board.length, cols = board[0].length;
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (search(board, word, r, c, 0)) return true;
            }
        }
        return false;
    }
    private boolean search(char[][] grid, String word, int r, int c, int idx) {
        if (idx == word.length()) return true;
        if (r < 0 || c < 0 || r >= grid.length || c >= grid[0].length || grid[r][c] != word.charAt(idx)) 
            return false;
        char saved = grid[r][c];
        grid[r][c] = '*';
        boolean res = search(grid, word, r + 1, c, idx + 1) ||
                      search(grid, word, r - 1, c, idx + 1) ||
                      search(grid, word, r, c + 1, idx + 1) ||
                      search(grid, word, r, c - 1, idx + 1);
        grid[r][c] = saved;
        return res;
    }
}
